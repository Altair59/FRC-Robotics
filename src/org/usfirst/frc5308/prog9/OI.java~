// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5308.prog9;

import org.usfirst.frc5308.prog9.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc5308.prog9.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shootlowspeedstartbutton;
    public JoystickButton liftupButton;
    public JoystickButton liftdownButton;
    public JoystickButton strentchinButton;
    public JoystickButton strentchoutButton;
    public JoystickButton blendupButton;
    public JoystickButton blenddownButton;
    public JoystickButton shoothighspeedstartbutton;
    public JoystickButton loadButton;
    public JoystickButton shootlowspeedstopbutton;
    public JoystickButton strentchin1;
    public JoystickButton strentchout1;
    public Joystick joystick1;
    public JoystickButton strentchinButton2;
    public JoystickButton strentchoutButton2;
    public JoystickButton strentchout1button2;
    public JoystickButton strentchin1button2;
    public Joystick joystick2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(1);
        
        strentchin1button2 = new JoystickButton(joystick2, 4);
        strentchin1button2.whileHeld(new strentcherIn1());
        strentchout1button2 = new JoystickButton(joystick2, 6);
        strentchout1button2.whileHeld(new strentcherOut1());
        strentchoutButton2 = new JoystickButton(joystick2, 1);
        strentchoutButton2.whileHeld(new strentcherOut());
        strentchinButton2 = new JoystickButton(joystick2, 2);
        strentchinButton2.whileHeld(new strentcherIn());
        joystick1 = new Joystick(0);
        
        strentchout1 = new JoystickButton(joystick1, 6);
        strentchout1.whileHeld(new strentcherOut1());
        strentchin1 = new JoystickButton(joystick1, 4);
        strentchin1.whileHeld(new strentcherIn1());
        shootlowspeedstopbutton = new JoystickButton(joystick1, 12);
        shootlowspeedstopbutton.whenPressed(new shootlowspeedstop());
        loadButton = new JoystickButton(joystick1, 10);
        loadButton.whileHeld(new load());
        shoothighspeedstartbutton = new JoystickButton(joystick1, 11);
        shoothighspeedstartbutton.whenPressed(new shoothighspeedstart());
        blenddownButton = new JoystickButton(joystick1, 8);
        blenddownButton.whileHeld(new blenddown());
        blendupButton = new JoystickButton(joystick1, 7);
        blendupButton.whileHeld(new blendup());
        strentchoutButton = new JoystickButton(joystick1, 1);
        strentchoutButton.whileHeld(new strentcherOut());
        strentchinButton = new JoystickButton(joystick1, 2);
        strentchinButton.whileHeld(new strentcherIn());
        liftdownButton = new JoystickButton(joystick1, 3);
        liftdownButton.whileHeld(new liftdown());
        liftupButton = new JoystickButton(joystick1, 5);
        liftupButton.whileHeld(new liftup());
        shootlowspeedstartbutton = new JoystickButton(joystick1, 9);
        shootlowspeedstartbutton.whenPressed(new shootlowspeedstart());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("drivewithjoystick", new drivewithjoystick());
        SmartDashboard.putData("shootlowspeed start", new shootlowspeedstart());
        SmartDashboard.putData("liftup", new liftup());
        SmartDashboard.putData("liftdown", new liftdown());
        SmartDashboard.putData("strentcherIn", new strentcherIn());
        SmartDashboard.putData("strentcherOut", new strentcherOut());
        SmartDashboard.putData("blendup", new blendup());
        SmartDashboard.putData("blenddown", new blenddown());
        SmartDashboard.putData("shoothighspeed start", new shoothighspeedstart());
        SmartDashboard.putData("load", new load());
        SmartDashboard.putData("shootlowspeed stop", new shootlowspeedstop());
        SmartDashboard.putData("strentcherIn1", new strentcherIn1());
        SmartDashboard.putData("strentcherOut1", new strentcherOut1());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

